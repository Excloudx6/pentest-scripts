#!/bin/bash

#set -euo pipefail

# Colours
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
reset="\e[0m"

banner(){
# Always print the banner
echo -e "                            __
\t                 ,. |_'.
\t                / / /:\ \\
\t              _/_/_/::: |
\t             / _'/ >::/ /
\t             / /'/:::/ /
\t            / /_/::.'_/ ${red}/\\
\t${reset}           / / \__.-'  ${red}/  \\
\t${reset}          / /          ${red}U  U
\t${reset}         / /    ${red}/\\      UU
\t${reset}        / /    ${red}/  \\  /\\
\t${reset}       / /     ${red}U  U /  \\
\t                ${red}UU  U  U
\t                ${red}     UU${reset}
"
}

banner

curl_agent="\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\""
curl_timeout="1"
curl_options=(-A "${curl_agent}" -k -s --max-time "${curl_timeout}" --connect-timeout "${curl_timeout}")
web_port_short_detection=(80 443 8080 8443)
web_port_long_detection=(80 81 443 832 981 1010 1311 2083 2087 2095 2096 4712 5001 7000 7001 7002 7003 7004 7005 7006 7007 7008 7009 7010 7080 7230 7443 7474 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8010 8011 8012 8013 8014 8040 8041 8042 8043 8044 8045 8046 8047 8048 8049 8050 8051 8052 8053 8054 8056 8057 8058 8059 8060 8061 8062 8063 8064 8065 8066 8067 8068 8069 8070 8071 8072 8073 8074 8075 8076 8077 8078 8079 8080 8081 8082 8083 8084 8085 8086 8087 8088 8089 8090 8091 8172 8118 8123 8172 8181 8222 8230 8243 8280 8281 8333 8443 8500 8770 8771 8772 8773 8774 8775 8776 8777 8778 8779 8780 8834 8880 8888 8983 9000 9001 9002 9043 9060 9080 9090 9091 9200 9610 9800 9981 9999 9443 12443)

usage(){
    echo "Syntax: $0 -a 192.168.0.1 -ws -t curl

Usage: 

    -a |--aim                 - specify an unique target to perform scan
    -l |--list                - get a provide file with all target to scan
    -o |--output              - specify a file to save the result of the scan
    -t |--tools               - here you need to inform curl or httpx, one of these tools will be used to perfom the scan
    -ws|--web-short-detection - indicate only the default ports 80, 443, 8080 and 8443 port to try identify webapp
    -wl|--web-long-detection  - indicate more the 50 ports to try identify webapp"
    exit 1
}

check_argument(){
    options+=(-l --list -o --output -t --target -wl --web-long-detection -ws --web-short-detection)
    if [[ "${options[@]}" =~ $2 ]] ; then
        echo -e "The argument of ${yellow}\"$1\"${reset} it can not be ${red}\"$2\"${reset}, please, ${yellow}specify a valid one${reset}.\n"
        usage
    fi
}

while [ $# -ne 0 ]; do
    case $1 in
        -a|--aim)
            check_argument $1 $2
            if [[ -n "${targets_file}" ]]; then
                echo "You can't use -l|--list option with -a|--aim, you need to choice only one!"
                usage
            else
                unset target
                target=$2
                shift 2
            fi
            ;;
        -l|--list)
            check_argument $1 $2
            if [[ -n "${target}" ]]; then
                echo "You can't use -t|--target option with -l|--list, you need to choice only one!"
                usage
            else
                if [ ! -s $2 ]; then
                    echo -e "Please provide a valid file!"
                    usage
                    exit 1
                else
                    unset targets_file
                    targets_file=$2
                    shift 2
                fi
            fi
            ;;
        -o|--output)
            check_argument $1 $2
            if ! touch $2/webscan_result.txt; then
                echo "You need to provide a local that the script can write the result file!"
                usage
            else
                unset output_file
                output_file="$2/webscan_result.txt"
                shift 2
            fi
            ;;
        -t|--tool)
            check_argument $1 $2
            if [[ "curl" != "$2" && "httpx" != "$2" ]] ; then
                echo -e "You need to inform one of these tools curl or httpx!\n"
                usage
            else
                unset tool
                tool="$2"
                if [ "${web_tool_detection}" == "httpx" ]; then
                    if ! command -v httpx > /dev/null 2>&1 ; then
                        echo -e "The ${red}httpx does not exist${reset} on the system!"
                        echo -e "Please install the httpx and put in your PATH!"
                        exit 1
                    fi
                fi
                shift 2
            fi 
            ;;
        -wl|--web-long-detection)
            if [[ -n ${ports} ]]; then
                echo "You can't use -ws|--web-short-detection with -ws|--web-long-detection, you need to choice only one!"
                usage
            else
                unset ports
                ports=("${web_port_long_detection[@]}")
                shift
            fi
            ;;
        -ws|--web-short-detection)
            if [[ -n ${ports} ]]; then
                echo "You can't use -wl|--web-long-detection with -ws|--web-short-detection, you need to choice only one!"
                usage
            else
                unset ports
                ports=("${web_port_short_detection[@]}")
                shift
            fi
            ;;
        -?*|*)
            usage
            ;;
    esac
done

if [[ -z ${target} && -z "${targets_file}" ]] || [[ -z "${ports}" ]] || [[ -z "${tool}" ]]; then
    usage
fi


if [[ -n ${target} && -z "${targets_file}" ]]; then
    if [ "${tool}" == "curl" ]; then
        for port in "${ports[@]}"; do
            http_status=$(curl "${curl_options[@]}" -L -w "%{response_code}\n" "http://${target}:${port}" -o /dev/null)
            if [[ "${web_get_status[@]}" =~ "${http_status}" ]]; then
                if [ -n "${output_file}" ]; then
                    echo "${target}:${port}" | tee -a "${output_file}"
                else
                    echo "${target}:${port}"
                fi
            fi
            unset http_status
        done
    fi
    if [ "${tool}" == "httpx" ]; then
        if [ -n "${output_file}" ]; then
            echo "${target}" | httpx -nc -silent -p $(echo "${ports[@]}" | sed 's/ /,/g') -o "${output_file}"
        else
            echo "${target}" | httpx -nc -silent -p $(echo "${ports[@]}" | sed 's/ /,/g')
        fi
    fi
fi

if [[ -s ${targets_file} && -z "${target}" ]]; then
    if [ "${tool}" == "curl" ]; then
        for target in $(cat "${targets_file}"); do
            for port in "${ports[@]}"; do
                http_status=$(curl "${curl_options[@]}" -L -w "%{response_code}\n" "http://${target}:${port}" -o /dev/null)
                if [ "${web_get_status[@]}" =~ "${http_status}" ]; then
                    if [ -n "${output_file}" ]; then
                        echo "${t}:${port}" | tee -a "${output_file}"
                    else
                        echo "${t}:${port}"
                    fi
                fi
                unset http_status
            done
        done
    fi
    if [ "${tool}" == "httpx" ]; then
        if [ -n "${output_file}" ]; then
            httpx -nc -silent -p $(echo "${ports[@]}" | sed 's/ /,/g') -l "${targets_file}" -o "${output_file}"
        else
            httpx -nc -silent -p $(echo "${ports[@]}" | sed 's/ /,/g') -l "${targets_file}" 
        fi
    fi
fi
